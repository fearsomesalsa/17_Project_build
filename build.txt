У проекта всегда будет минимум 2 основные сборки. Конечно, может быть и больше, но основных всегда две.

1. Development
Сборка, предназначенная для использования во время разработки проекта. Для разработчиков
Когда мы выполняем ng serve, мы запускаем дев сборку
Но чтобы проект запускался на сервере, т.е. на хостинге, нам нужно использовать другой тип сборки - продакшен.

2. Production
Сборка, предназначенная для загрузки на сервер. Для пользователей веб-ресурса
При этой сборке убирается все лишнее, и код максимально сжимается. 

Хотя мы и можем запускать на сервере дев сборку, а на локальном компьютере прод сборку, это чаще всего не имеет никакого смысла.
Да, можно запускать у себя продакшен сборку на компьютере, чтобы убедиться, что все работает, и приложение компилируется без ошибок, но не более.

Чем обычно отличаются такие сборки?
Для дев сборки проект запускается чаще всего в том виде, как он есть. Т.е. происходит лишь минимальное преобразование файлов для запуска в браузере, например из TS в JS (т.к. браузер просто не воспринимает TS).
А вот в продакшен сбрке происходит максимальное сжатие файлов, ведь конечному пользователю не нужны исходники, его не волнует, читается там код или нет. Ему важно рабочее приложение. При этом которое быстро скачивается и быстро работает, а для этого происходит удаление всего лишнего, минификация файлов, деление их на частички (так называемые chanks - чанки) и т.д.

Сделаем продакшен сборку нашего проекта
Проанализируем все, что выводится в консоль после выполнения ng build
Initial Chunk Files           | Names                          |  Raw Size | Estimated Transfer Size
main.31af6da6e24ba260.js      | main                           | 566.28 kB |               146.47 kB
styles.a54d6688a3448f99.css   | styles                         | 512.18 kB |                48.59 kB
polyfills.efb856210af52278.js | polyfills                      |  33.01 kB |                10.63 kB
runtime.3288148d18ab14b9.js   | runtime                        |   2.72 kB |                 1.31 kB

                              | Initial Total                  |   1.09 MB |               207.00 kB

Слева находятся файлы, которые получаем на выходе
Справа две колонки с их размерами. Первый столбец - это initial размер, т.е. фактический размер файла. Второй столбец - размер файла, который мы получим на выходе после компиляции, т.к. они сжимаются. Это дает нам представление о том, сколько пользователю фактически придется загрузить Мб нашего приложения себе в браузер (это не учитывая картинки, шрифты и т.д. - только код).
При этом в конфиге angular.json по умолчанию есть настройки размеров приложения, которые мы можем контролировать. Если в процессе сборки Angular определяет, что размер приложения превысил эти ограничения, то выдает предупреждение либо ошибку.
Сейчас мы получили ошибку, что у нас есть ограничение в 1Мб исходных файлов, но мы превысили его, из-за чего наша сборка прервалась.
Error: bundle initial exceeded maximum budget. Budget 1.00 MB was not met by 90.19 kB with a total of 1.09 MB.
Предупреждение мы получаем, когда приложение составляет минимум 500Кб.
Warning: bundle initial exceeded maximum budget. Budget 500.00 kB was not met by 614.19 kB with a total of 1.09 MB.

Чтобы скомпилировать наше приложение, нужно эти настройки исправить.
angular.json - configurations - production - budgets - раздел с type: 'initial'
"maximumWarning": "500kb" - согласно этим настройкам, когда наши исходники будут весить больше, чем 500Кб, мы получим предупреждение.
"maximumError": "1mb" - если все приложение будет весить больше 1Мб (еще в сыром виде, не преобразованном), то мы получим ошибку.

Когда у нас есть огромный проект, с котором мы работаем, возможно для нас это будет важно - контролировать тот размер приложения, который мы будет деплоить на хостинг. Несмотря на то, что на выходе мы получим 300Кб (например, как тут), эта информация все равно ценна для анализа, ведь именно оригинальный размер файлов определяет, насколько большое наше приложение, и возможно что-то лишнее можно выкинуть.
Lazy Chunk Files              | Names                          |  Raw Size | Estimated Transfer Size
228.00d3bcc75ae6caaf.js       | views-order-order-module       |  27.27 kB |                 7.13 kB
992.d13292ddd5245d31.js       | views-home-home-module         |  25.18 kB |                 6.76 kB
173.0386f9757d65857e.js       | views-products-products-module |   7.70 kB |                 2.23 kB
common.4e8ee4f977e43371.js    | common                         | 572 bytes |               314 bytes

Если например мы используем несколько библиотек, и допустим подключаем бутстрап только ради того, чтобы показать 1 попап, то в этом нет никакого смысла, т.к. будет очень много зависимостей у бутстрапа для того, чтобы просто показать попап. Тогда лучше сделать его вручную.
И нет особой надобности в том, чтобы использовать несколько библиотек, как мы это сделали в нашем приложении.
Т.е. если мы используем одну библиотеку, рекомендуется использовать все компоненты из этой библиотеки, не подключать другие.
В нашем случае, если бы мы поубирали все лишние библиотеки, то наше приложение бы не весило 1Мб.
Но допустим с нашим приложением мы делать ничего не хотим, а хотим оставить его в таком виде как есть. На устраивает, что в нескомпилированном виде оно весит 1Мб, скомпилированное - 300Кб.
Мы решаем оставить текущий размер, но изменить ограничения
"maximumWarning": "1mb"
"maximumError": "2mb"
Теперь после ng build мы получим предупреждение о том, что приложение весит больше 1Мб, но не получим ошибку.
Warning: bundle initial exceeded maximum budget. Budget 1.00 MB was not met by 90.19 kB with a total of 1.09 MB.
В рез-те билда мы получаем самое просто веб-приложение, которое состоит из html, css, js файлов, а так же картинок, шрифтов и прочих assets файлов.
Это именно то, что должно попадать на наш хостинг. Т.е. все, что находится в папке dist/pizza, - это готовый наш проект, который мы можем залить куда угодно.

В секции "configurations" мы устанавливаем еще некоторые настройки сборки проекта, как для продакшен, так и для девелопмент сборки.
"configurations": {
   "production": {
	...
   }, 
   "development": {
	...
   }
}
Например, еслм мы не хотим, чтобы в дев сборки были source map файлы, можно задать "sourceMap": false - тогда в браузере мы их не увидим (особого смысла в этом нет, но есть возможность).
Выше в разделе "architect" мы увидим настройки билда. Тут еще две секции: "build" и "serve".
Секция "serve" работает тогда, когда мы выполняем ng serve, а "build" - ng build.
При этом тут есть некоторые опции, на которые мы можем влиять.
Например, если мы хотим, чтобы проект компилировался не в dist/pizza, можно изменить "outputPath": "dist/pizza".

Вебпак и другие сборщики на angular мы не используем, они тут не нужны, потому что есть angular cli. Все процессы по сборке должны проходить через него, т.к. все это мы указываем в этом конфиге.
Например, нам надо скопировать какой-то файл в директорию dist/pizza, и мы не знаем, как это сделать, то отправляемся в гугл angular build copy file to dist

Мы сделали первую сборку и получили файлы для нашего продакшена. Теперь мы можем либо сразу их залить на сервер и смотреть уже там, как это все работает, либо попробовать запустить какой-то локальный сервер, чтобы убедиться, что сборка у нас рабочая и потестировать ее.
Для этого мы попробуем запустить локальный мини-сервер http-server. Установим его через npm i http-server --save-dev
Кроме http-server можно использовать и, например, lite-server, и другие - их много.
После установки запускаем сервер с указанием той папки, в которой находится наш собранный проект http-server dist/pizza (если вылезает ошибка "http-server : Имя "http-server" не распознано как имя командлета, функции, файла сценария или выполняемой программы. Проверьте правильность написания имени, а также наличие и правильность пути, после чего повторите попытку.", то установить глобально с флагом -g)
Далее можно перейти на http://127.0.0.1:8080 и проверить работоспособность.

То, что мы сейчас сделали, максимально приближенная версия запуска на продакшене.
Принцип взимодействия браузера и сервера
Браузер ------> Софт веб-сервера + приложение ангуляр
		Сервер

На сервере всегда функционирует какой-то софт веб-сервера, чаще всего Apache или nginx.
В нашем случае мы используем простой локальный пакет http-server. Это веб-сервер принимает входящие подключения к серверу, а в ответ отведает нужные файлы. Т.е. когда мы открываем наш сайт, либо, как сейчас, localhost:4200 или любой другой порт, то сервер достает из директории файл index.html, отдает его в ответ, и далее все файлы запрашиваются по одному так же у этого сервера. Мы все запросы можем увидеть в логах этого сервера (в консоли IDE) после запуска.
Первый запрос был "GET /" - там мы отдали index.html
И дальше, после того, как index.html был запущен в браузере, начали осуществляться все остальные запросы для js, css, png и т.д.
При этом если мы хотим, чтобы продакшен сборка пересобиралась сама после каждого изменения в файле, то можно в одном терминале запустить сервер, открывать второй терминал и здесь запустить ng build --watch. Благодаря запуску такой команды с отслеживанием, когда мы будем делать какие-то изменения в проекте, они сразу будут билдиться заново, и мы всегда будем иметь актуальную сборку, к которой у нас настроен веб-сервер (на странице в браузере сразу будут видны изменения).

Саму сборку на сервере чаще всего запускают либо вручную, либо по спец. процессу, который автоматически запускается в рамках деплоймента.
Команду ng build --watch запускать на сервере не рекомендуется, т.к.тогда мы запускаем неконтролируемый процесс сборки нашего проекта, и при любом малейшем изменении файла, будет происходить сборка проекта, что может сказать на использовании сайта нашими пользователями. Так что лучше сначала запускать билд на сервере вручную, а затем, когда разберемся и сможем уже настраивать какие-то процессы там, тогда можно делать команду ng serve --watch.

В рамках разных сборок мы надо исользовать разные environment переменные.
Начиная с 15 версии в Angular по умолчанию не создается папка с файлами environments. Чтобы в вашем проекте были эти файлы и вы могли использовать конфигурации, выполните команду ng generate environments
В папке environments лежат 2 файла: environment.ts и environment.prod.ts. 
В одной файле (environment.prod.ts) находятся переменные, которые мы можем использовать для продакшен сборки, а в другом файле (environment.ts) находятся те, которые мы используем для дев сборки.
Здесь находится объект, в котором есть свойства, где мы можем добавлять совершенно любые свойства для нашего проекта, которые хотим.
Сейчас тут одно свойство production, которое в дев файле имеет значение false, а в продакшен - true.
Т.е. это свойство мы можем как-то использовать в коде для того, чтобы определить, это сейчас продакшен или дев сборка. Но такое на самом деле нужно нечасто. К примеру, определяя это свойство, мы можем либо делать какие-то запросы на бэкенд, либо не делать (если например мы не хотим делать лишние запросы на дев сборке).

В файле main.ts импортируется
import {environment} from './environments/environment';
и проверяется флаг production, если он true, то влкючается ProdMode
if (environment.production) {
    enableProdMode(); // эта функция входит в состав @angular/core. Благодаря запуску этой функции, мы и получаем  продакшен сборку.
}
При этом импортируется переменная environment из основного файла environment (т.е. environment.ts).
Если мы используем дев сборку, то ничего не меняется, и мы используем тот файл, который указан в импорте, т.е. environment.ts.
Если мы используем продакшен сборку, то файл просто подменяется (environment.prod.ts переименовывается в environment.ts).
Это можно заметить в настройках angular.json
"development": {
  "fileReplacements": [
    {
      "replace": "src/environments/environment.ts",
      "with": "src/environments/environment.development.ts"
    }
  ]
}
В файлах environment.ts и environment.prod.ts не нужно ничего делать для того, чтобы это работало. В любом проекте angular по умолчанию вся эта система уже работает так, как нужно.
Важно соблюдать правило: свойства в этих двух файлах должны быть одинаковые. В продакшен сборке будет одно значение, в дев сборке - другое.

Пример: у нас есть 3 запроса на testologia/site в product.service.ts
Для того, чтобы наш код был более правильным и универсальным, лучше определенную часть этого url адреса вынести в файл environment. Потому что очень часто в проектах запросы на бэкенд с локального проекта происходят по одному адресу, а с продакшен сборки, т.е. с того проекта, который на сервере, происходит по другому адресу.
Для дев сборки укажем apiURL: 'http://localhost:3000/' // Когда мы запускаем ng serve, у нас в запросах на бэкенд будет фигурировать этот домен
Для продакшен сборки укажем apiURL: 'http://testologia.site/' // Когда мы запускаем ng build
Конечно, можем быть один и тот же сервер, но чаще всего это либо какой-то другой сервер для тестирования (для дев сборок с тестовыми данными), либо это можем быть отдельный бэкенд-проект, который мы у себя локально на компьютере запускаем (тогда указываем localhost).

Если мы работаем с готовым бэкендом или вообще без бэкенда, то мы можем свое фронтенд приложение публиковать на некоторых бесплатных сервисах.
1. Github pages
В нашем проекте гиб уже был настроен (это видно по цвету файлов), но лучше удалить его и настроить заново, удалив папку .git
Затем git init
git add .
git commit -m "init"
git branch -M main (если хотим переименовать ветку в main, но можно использовать master ветки)
Создаем новую репу на github (паблик или приват - неважно), ничего добавлять не нужно (типа readme.md или .gitignore - все уже есть).
git remote add origin https://github.com/fearsomesalsa/17_Project_build.git
git push -u origin master (если не переименовывали в main)

Именно саму сборку проекта в репе никто не хранит, потому что это не совсем правильно.
Папка dist находится в .gitignore. Будет нелогично создавать папку dist, чтобы загрузить в репу скомпилированые файлы. Но нам это сделать нужно, чтобы воспользоваться хостингом github pages.
Для этого мы сделаем отдельную ветку, к которой привяжем github pages
git checkout -b gp
Т.к. .gitignore уже содержит папку dist и изменять это сейчас нет смысла, то создадим новую папку docs, в которую будем пушить скомпилированные файлы.
Когда мы будем делать билд непосредственно в этой ветке, мы будем  использовать команду ng build --output-path docs
Такой путь можно поменять и в angular.json "outputPath": "dist/pizza"
"architect": {
  "build": {
    "builder": "@angular-devkit/build-angular:browser",
      "options": {
        "outputPath": "dist/pizza",
...
}
Но при этом мы в команде используем docs. Т.е. делая такую ветку только для хостинга на гитхаб, для нас выгоднее ничего не менять в проекте, но подстроить команды нужным образом.

Когда мы будем запускать проект на github pages, то в url-адресе через / будет название нашего проекта /pizza, и его мы отсюда никак не сможем убрать. Поэтому нам нужно сделать так, чтобы проект, который мы компилируем, считал это базовым адресом. Укажем еще один параметр --base-href /pizza/ (после / указываем название репозитория, и обязательно по сторонам должны быть слэши)
ng build --output-path docs --base-href /pizza/
Появилась папка docs в ветке dp (ее не должно быть в master)
Чтобы каждый раз для сборки не писать эту длинную команду, можно сохранить ее в package.json и далее вызывать npm run build-gp
git status
git add .
git commit -m 'docs folder'
git push -u origin gp
Переходим в Settings - Pages - Deploy from a branch оставляем - Выбираем gp и папку /docs - Save
Бэкенд на гитзаб загрузить не получится.
После этого заходим во вкладку Actions, тут можно увидеть workflow - это определенный процесс, в котором происходит сохранение нашего проекта для того, чтобы он был доступен по указанному адресу.
После того, как мы сохранили настройки, проект не будет доступен сразу же для того, чтобы его можно было открыть в браузере и перейти на сайт.
Т.е. нужно дождаться, пока процесс завершится (зеленая галочка).
После этого можно вернуться в основную репу -> справа Environments github-pages - View Deployment (теперь кнопка со стрелкой)

Последовательность действий, что нужно делать, если мы что-то меняем в нашем проекте.
Допустим, мы работаем в ветке master, а ветку gp используем только для того, чтобы выкладывать билд.
git checkout main
git status
Сделаем так, чтобы попап на главной не отображался
git add .
git commit -m "changed popup behavior"
git push
Т.е. мы просто продолжаем разработку и делаем пуш изменений на удаленный репозиторий ветки master.
Теперь мы хотим наш проект задеплоить на github-pages.
git checkout gp
git merge main // переносим в ветку gp изменения из ветки main (в редакторе vim можно ввести :x, чтобы сохранить и выйти)
npm run build-gp // запускаем сборку
git add .
git commit -m "update build"
git push
В Actions появится новый task workflow, который находится в прогрессе (крутится желтое кольцо - билд собирается). После завершения проект будет обновлен на хостинге.

Задеплоим наш проект на firebase https://firebase.google.com/
Входим в свою учетку - Go to console - Add project - название test - Отключить google аналитику - Создать проект
Вкладка Build - Hosting - Get started
Установить глобально пакет firebase-tools
npm install -g firebase-tool
После установки будет доступна в терминале команда firebase. Далее login для того, чтобы привязать наш компьютер к этому проекту, к нашей учетке
firebase login 
Перекинет в браузер, где надо будет войти в свою учетку и разрешить доступ
collect CLI ... information? - n
Далее
firebase init
Тут firebase спрашивает, как мы хотим использовать наш проект (предлагает фичи, которые мы можем активировать)?
Нам нужен только хостинг, находим Hosting: Configure files fir Firebase Hosting and (optionally) set up Github Actions Deploys, нажимаем на Space (пробел) и Enter
Нужно выбрать опцию: создавать проект или использовать существующий? - Используем существующий
Далее выбираем, какой проект мы будем использовать (test)
Какую директорию хотим использовать как публичную? Если мы будем работать в ветке master, что в целом можно делать, учитывая то, что нам не нужно в случае с firebase применять никаких изменений для нашего проекта, то мы можем указать dist/pizza
Хотим сконфигурировать как SPA? - y
Хотим сделать автоматические билды и деплои с Github? - n
Хотим ли мы этот файл перезаписать? - n 
Теперь можем использовать
firebase deploy
Эту команду можно будет использовать сразу после того, как мы сделаем определенные изменения в проекте. Соответственно та папка, которую мы указали ранее dist/pizza, и будет загружаться по выполнению этой команды на хостинг.
Перейдем по url и убедимся, что все работает
У нас загрузилась на хостинг та сборка, которая была в master до удаления попапа с главной.
git status (мы в ветке gp)
Появились 2 файла .firebaserc и firebase.json и 1 скрытая директория .firebase/
Их не нужно удалять, если мы хотим пользоваться firebase.
git checkout main
Можно закоммитить эти файлы здесь, если мы хотим использовать firebase как основной хостинг для проекта
git add .
git commit -m "add firebase"
Папку .firebase/ лучше добавить в .gitignore (добавлить в секцию # IDEs and editors), т.к. там хранится какой-то кэш, который нам не нужен
Если в гите он нам не нужен, то удалим его git rm .firebase -r
git status 
git add
git commit -m "changed gitignore"
Добавили вместо попапа console.log('Hello')
Сделаем локальный билд, т.к. мы не работаем с отдельной веткой, как с github-pages
ng build
firebase deploy

Как можно сделать размещение нашего готового фронтенд-проекта на хостинге reg.ru
https://www.reg.ru/
Вкладка Хостинг - Хостинг сайтов https://www.reg.ru/hosting/
Можно выбрать любой из вариантов тарифов, но на самом дешевом тарифе скорее всего даже git не сможем использовать, не говоря уже про доступ по протоколу SSH.
Рекомендуется 2 тариф, который поддерживает больше возможностей и по цене несильно отличается, но на нем можно использовать git и доступ по протоколу SSH.
Заказать
Можно к этому добавить домен, который нас интересует. Вводим домен. Обязательно нужно убедиться, что домен и хостинг, которые мы подключаем, будут связаны между собой для того, чтобы настройки применились автоматически
Так же можно бесплатно добавить SSL-сертификат для того, чтобы наш сайт был доступен по протоколу https
После оплаты все эти услуги появятся в личном кабинете, и настройка происходит автоматически (как минимум в случае с хостингом reg.ru).

После того, как оплатили домен и хостинг, даже которые связаны между собой, обычно должно пройти время для того, чтобы все заработало. Обычно активируется все за 2-3 часа (у некоторых хостинг-провайдеров активация иногда занимает сутки).
Несмотря на то, что сайт будет в процессе активации, мы сможем загружать сайт на хостинг сразу, как только подключили услугу хостинга.
После оплаты переходим в список своих услуг в личном кабинете, находим свой хостинг, к которому привязан домен, и открываем его.
На странице хостинга можно найти всю необходимую информацию для того, чтобы полноценно его настраивать и пользоваться 
Открываем панель управления  (обычно это может быть ISP панель, а может быть какая-то другая, напр. C панель. Функционал у них примерно одниаковый - интерфейс разный)
Открываем Менеджер файлов. Тут нужно найти по структуре файлов и папок ту папку, где находится наш проект. Обычно это папка www/ и далее папка с названием нашего сайта
Внутри этой папки что-то есть, это можно удалить (Выделить файл - Редактировать - Удалить) и вместо этого загрузить свои файлы.
Самый простой способ загрузки проекта на хостинг - взять папку pizza (все, что внутри), заархивировать, загрузить и разархивировать.
Загрузить - Выбираем файл pizza.zip
После загрузки выбираем Архив - Извлечь - Выбираем папку www/my-app.website - Ок
Удаляем архив и папку MACOSX (если есть)
Выделяем все в папке pizza, выбираем копировать и папку www/my-app.website (выбрать галочку Перенести файлы) - Ок
Теперь в папке pizza ничего нет, удаляем ее.

Такой способ загрузки проекта на хостинг годится, если мы не будем часто менять проект.
Оптимальным вариантом будет развертывание проекта на сервере через git, как мы это делали ранее в части курса про git.
При этом важно будет заходить на сервер под SSH доступом и выполнять команды на сервере, чтобы сливать изменения через git в нашем проекте.

2 способа загрузки frontend-проекта на хостинг через git, оба начинаются с клонирования проекта на сервере в папку проекта. 
Заходим на сервер через SSH
Клонируем проект через git clone (т.е. в папку my-app.website мы зайдем через SSH и здесь выполним git clone с . для того, чтобы проект был развернут здесь.
Далее все зависит от того, какой у нас сервер. 
Если это обычный хостинг, то возможностина таком сервере очень ограничены. Тут гит + веб-сервер, пожалуй, единственное, что доступно из преимуществ в плане работы с фронтенд-проектом.

1. В этом случае пользуемся таким же способом, как мы делали с github-pages
а) Создаем в репе отдельную ветку под сервер (мы создавали gp, но можно например hosting)
б) Настраиваем веб-сервер так, чтобы работал с папкой билда (на данный момент наш сервер ведет в папку my-app.website, и если мы сюда загрузим проект, то автоматически ничего работать не будет, ведь в этой папке нет файла index.html). Нужно будет сделать так, чтобы сервер вел наш сайт по нашему домену в папку my-app.website/docs/. Возможности изменения папки на нашем хостинге лучше узнать у хостинг-провайдера.
Процесс загрузки изменений на хостинг:
в) Билдим локально
г) Пушим в удаленную репу
д) Пулим изменения на сервере
2. Более удобный, но более дорогой способ. Требует хостинг с правом на управление им и установку софта. Такой способ обычно используется в больших проектах, которые разрабатываются долго и нуждаются в постоянном деплое релизов. 
а) Устанавливаем node, npm, angular cli 
б) Пулим изменения на сервере
в) Билдим на сервере
Тут не нужно едлать отдельную ветку под деплоймент. Можно слить на хостинг даже ветку master, хотя чаще всего для релизов создают отдельные ветки, и прямо на сервере запускать ng build.
Т.е. когда нам надо обновить на сервере проект, мы не делаем локальный билд, а потом его загружаем, а наоборот: заходим на сервер, там делаем git pull и ng build.
Главный минус этого подхода в том, что нам нужен облачный хостинг. Это когда мы покупаем свой сервер и платим намного больше, чем за обычный виртуальный хостинг.

Реализуем 1 способ:
Был отдельный урок, в котором было показано, как заходить на сервер через протокоk SSH, используя программу putty на windows.
Скачиваем putty - устанавливаем - запускаем - вставляем IP-адрес нашего сервера - нажимаем open - попадаем в терминал 
На MacOS команда ssh login@IPaddress (login можно получить в настройках на вкладке Доступы, IPaddress во вкладе Управление - Сервер хостинга)
Если запросит пароль, то он там же, где и логин
pwd // смотрим, в какой директории мы находимся
ls -l // список содержимого
cd www/my-app.website/
ls -l // тут все файлы проекта
Т.к. мы хотим работать с гитом, т.е. загружать сюда наш проект автоматически, то нам нужно все эти файлы сейчас удалить и загрузить сюда наш проект через git clone
rm -rf * // удаляем все файлы
ls - l // ничего нет, т.е. папка пустая
Возвращаемся на github.com в наш репозиторий
Будем использовать уже имеющуюся ветку gp
git status // мы в main
git add .
git commit -m "new commit"
git checkout gp
git merge main
Вставляем :x
Тут у нас билд в папке docs
Эту сборку вместе с папкой docs, т.е. весь проект мы должны загрузить на наш хостинг.
При этом нужно сделать так, чтобы наш хостинг отправлялся не в эту папку, а в папку docs, ведь именно в docs у нас находится index.html
Нужно узнать в поддержке, есть ли возможность на нашем тарифе перенаправить наш сервер в эту директорию (на самом дешевом тарифе это точно нельзя сделать). На втором тарифе Host-A это можно сделать
В разделе Сайты нужно удалить текущий сайт, который у нас есть, а затем добавить новый и указать там другую корневую директорию.
Перед удалением лучше санчала нажать Изменить, чтобы посмотреть текущие настройки (сделать скрины!) и создать точно такой же по примеру. Когда мы удали сайт, заново его создать с тем же количеством настроек может быть сложно. 
При удалении директорию можно удалять или не удалять (мы удалим).
В имени нужно указать тот домен, который мы выбрали (my-app.website).
В корневую директорию нужно дописать www/my-app.website/docs
Защищенное соединение - да
Перенаправлять HTTP-запросы в HTTPS - да
Далее все подставилось автоатически, поэтому Ок
Теперь нужно загрузить на хостинг нашу сборку
В терминале проверим, что мы в папке www/my-app.website/ 
git clone https://github.com/itlogiaru/pizza.git .
Смотрим в менеджере файлов, все ли склонировалось. Папки docs нет, т.к. мы в ветке main
git checkout gp
Папка docs появилась
Сайт не работает потому что когда мы делали билд для гитхаба, мы добавляли --base-href /pizza/, но на нашем хостинге это делать не нужно.
Переходим в WS
git status // мы в ветке gp
ng build --outpit-path docs (либо можно исправить в package.json "build-gp")
git add .
git commit -m "update build"
git push
Теперь заходим под ssh в терминал 
git pull
Обновляем страницу my-app.website - работает
